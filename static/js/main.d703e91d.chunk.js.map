{"version":3,"sources":["logo-light.svg","App.js","index.js"],"names":["App","useState","account","setAccount","contracts","setContracts","onClickLogin","e","a","preventDefault","torus","Torus","buttonPosition","init","whiteLabel","theme","isDark","colors","torusBrand1","logoDark","logoLight","disclaimerHide","network","host","chainId","networkName","login","web3","Web3","provider","eth","getAccounts","address","getBalance","balance","ethers","providers","Web3Provider","createERC20","signer","getSigner","contractAddress","erc20","freeport","createFreeport","onClickBuy","approve","takeOffer","BigInt","className","src","logo","alt","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"m3BAAe,MAA0B,uC,6DCgG1BA,MAxFf,WACI,MAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,qBAAlC,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBD,EAAEE,iBAEIC,EAAQ,IAAIC,IAAM,CACpBC,eAAgB,cAJH,SAMXF,EAAMG,KAAK,CACbC,WAAY,CACRC,MAAO,CACHC,QAAQ,EACRC,OAAQ,CACJC,YAAa,YAGrBC,SAAU,2DACVC,UAAW,2DACXC,gBAAgB,GAEpBC,QAAS,CACLC,KAAM,SACNC,QAAS,MACTC,YAAa,qBArBJ,uBAwBXf,EAAMgB,QAxBK,cA0BXC,EAAO,IAAIC,IAAKlB,EAAMmB,UA1BX,SA2BMF,EAAKG,IAAIC,cA3Bf,cA2BXC,EA3BW,OA2B8B,GA3B9B,UA4BKL,EAAKG,IAAIG,WAAWD,GA5BzB,eA4BXE,EA5BW,OA6BjB/B,EAAW,CAAC6B,UAASE,YAEfL,EAAW,IAAIM,SAAOC,UAAUC,aAAa3B,EAAMmB,UA/BxC,UAgCGS,YAAY,CAC5BC,OAAQV,EAASW,YACjBC,gBAAiB,+CAlCJ,QAgCXC,EAhCW,OAoCXC,EAAWC,YAAe,CAC5BL,OAAQV,EAASW,YACjBC,gBAAiB,+CAErBpC,EAAa,CAACsC,WAAUD,UAxCP,4CAAH,sDA2CZG,EAAU,uCAAG,WAAOtC,GAAP,SAAAC,EAAA,6DACfD,EAAEE,iBADa,SAETL,EAAUsC,MAAMI,QAAQ1C,EAAUuC,SAASX,QAAS,YAF3C,uBAGT5B,EAAUuC,SAASI,UACrB7C,EAAQ8B,QACR,6CACAgB,OAAO,iFACPA,OAAO,YACPA,OAAO,MARI,2CAAH,sDAYhB,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACxClD,EACG,sBAAK+C,UAAU,WAAf,UACI,8BACI,6CADJ,KAC+B/C,EAAQ8B,WAEvC,8BACI,6CADJ,KAC+B9B,EAAQgC,WAEvC,mBAAGe,UAAU,WAAWI,QAASR,EAAjC,wBAKJ,qCACI,yFACA,mBAAGI,UAAU,WAAWI,QAAS/C,EAAjC,4BCjFxBgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d703e91d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-light.106e4676.svg\";","import logo from './logo-light.svg';\nimport './App.css';\nimport {useState} from \"react\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport Web3 from \"web3\";\nimport {createERC20, createFreeport} from \"@cere/freeport-sdk\";\nimport {ethers} from \"ethers\";\n\nfunction App() {\n    const [account, setAccount] = useState();\n    const [contracts, setContracts] = useState();\n\n    const onClickLogin = async (e) => {\n        e.preventDefault();\n\n        const torus = new Torus({\n            buttonPosition: 'top-right',\n        });\n        await torus.init({\n            whiteLabel: {\n                theme: {\n                    isDark: true,\n                    colors: {\n                        torusBrand1: '#B70F93',\n                    }\n                },\n                logoDark: 'https://cere.network/assets/images/header/logo-light.svg',\n                logoLight: 'https://cere.network/assets/images/header/logo-light.svg',\n                disclaimerHide: true,\n            },\n            network: {\n                host: 'mumbai',\n                chainId: 80001,\n                networkName: 'Polygon Testnet'\n            },\n        });\n        await torus.login();\n\n        const web3 = new Web3(torus.provider);\n        const address = (await web3.eth.getAccounts())[0];\n        const balance = await web3.eth.getBalance(address);\n        setAccount({address, balance});\n\n        const provider = new ethers.providers.Web3Provider(torus.provider)\n        const erc20 = await createERC20({\n            signer: provider.getSigner(),\n            contractAddress: '0x4e5a86E128f8Fb652169f6652e2Cd17aAe409e96'\n        });\n        const freeport = createFreeport({\n            signer: provider.getSigner(),\n            contractAddress: '0x702BA959B5542B2Bf88a1C5924F73Ed97482c64B'\n        });\n        setContracts({freeport, erc20});\n    };\n\n    const onClickBuy = async (e) => {\n        e.preventDefault();\n        await contracts.erc20.approve(contracts.freeport.address, '50000000');\n        await contracts.freeport.takeOffer(\n            account.address,\n            '0x325ec461f77fa260851c2e582c23f157be54b041',\n            BigInt('22783081436715926951418794946865374550317546867850358514859376679352637849900'),\n            BigInt('50000000'),\n            BigInt('1'),\n        );\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                {account ? (\n                    <div className=\"App-info\">\n                        <p>\n                            <strong>Address</strong>: {account.address}\n                        </p>\n                        <p>\n                            <strong>Balance</strong>: {account.balance}\n                        </p>\n                        <a className=\"App-link\" onClick={onClickBuy}>\n                            Buy NFT\n                        </a>\n                    </div>\n                ) : (\n                    <>\n                        <p>You didn't login yet. Login to see your account details.</p>\n                        <a className=\"App-link\" onClick={onClickLogin}>\n                            Login\n                        </a>\n                    </>\n                )}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}